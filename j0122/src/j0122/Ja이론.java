package j0122;

public class Ja이론 {
	/*
	 * 객체지향개념 
	 * 1. 상속 
	 * 2. 오버라이딩 -- 재정의하는 거 / 상속일 때만 가능 
	 * 3. 패키지와 임폴트 
	 */

	/* 4. 제어자 - 접근제어자, 그 외 제어자 분리
	 * 4-1. 접근 제어자
	 * 4-1-1. private : 같은 클래스 내에서만 접근 가능
	 * 4-1-2. default : 같은 패키지 내에서만 접근 가능
	 * 4-1-3. protected : 같은 패키지 내 그리고 다른 패키지의 자손 클래스에서 접근 가능
	 * 4-1-4. public : 접근 제한 없음 (전체)
	 * * * 접근을 제어해서 보안에 좋음 
	 * 접근 제어자를 사용하는 이유
	 * 외부로 부터 데이터 보호, 외부에는 불필요한 내부적으로만 사용되는 부분을 감추기 위해 (캡슐화!!!!)
	 */
	
	 /* 5. 다형성
	 * - 여러 가지 형태를 가질 수 있는 능력
	 * - 하나의 참조변수로 여러 타입의 객체를 참조할 수 있는 것
	 * - ㄴ 조상타입의 참조변수로 자손타입의 객체를 다룰 수 있는 것
	 * - ㄴ 하지만 자손만 갖고 있는 객체는 사용 못함 (공간은 존재, 사용은 안댐)
	 * * * 자손 = 조상 [형변환 생략가능]
	 * * * 자손 = 조상 [형변환 필수]
	 */
	
	/* 6. 추상클래스 (abstract)
	* abstract void move(int x, int y); // 추상메소드
	* 뒤에 {} 괄호가 없어야함. 미완성 메소드 << 
    * Unit u = new Unit(); 추상메소드는 선언이 안됨
	*/
	
	/* 7. 인터페이스 (interface) - class 대신 interface  사용
	 * 추상클래스. 하지만 추상클래스보다 더 추상도가 높다. 
	 * 그냥 제대로 된게 하나도 없음. (한개라도 있으면 추상클래스)
	 * 부모가 인터페이스이면 상속받는거에 extends 대신 implements 사용
	 * 다형성 적용 가능 부모가 두개일 수 잇다.
	 * 
	 * 
	 * 
	 * 
	 */
}
